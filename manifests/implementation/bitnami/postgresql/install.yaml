ocfVersion: 0.0.1
revision: 0.1.0
kind: Implementation
metadata:
  prefix: cap.implementation.bitnami.postgresql
  name: install
  displayName: Install PostgreSQL database
  description: Action which installs PostgreSQL database via Helm chart
  documentationURL: https://github.com/bitnami/charts
  supportURL: https://bitnami.com
  license:
    name: "Apache 2.0"
  maintainers:
    - email: team-dev@capact.io
      name: Capact Dev Team
      url: https://capact.io
  attributes:
    cap.attribute.containerization.kubernetes.kubeconfig-support:
      revision: 0.1.0

spec:
  appVersion: "10,11,12,13"

  # TODO:(https://github.com/capactio/capact/issues/539): This will be moved as an optional input on Interface
  additionalInput:
    typeInstances:
      kubeconfig:
        typeRef:
          path: cap.type.containerization.kubernetes.kubeconfig
          revision: 0.1.0
        verbs: [ "get" ]

  outputTypeInstanceRelations:
    postgresql:
      uses:
        - psql-helm-release
        # TODO(https://github.com/capactio/capact/issues/537): renderer doesn't support relations for additionalInput.typeInstances
        #- kubeconfig

  implements:
    - path: cap.interface.database.postgresql.install
      revision: 0.1.0

  requires:
    cap.core.type.platform:
      oneOf:
        - name: kubernetes
          revision: 0.1.0
    cap.core.type.hub.storage:
      allOf:
        - name: cap.type.helm.release.storage
          revision: 0.1.0
          alias: helm-release-storage
        - name: cap.type.helm.template.storage
          revision: 0.1.0
          alias: helm-template-storage

  imports:
    - interfaceGroupPath: cap.interface.runner.helm
      alias: helm
      methods:
        - name: install
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.runner.argo
      alias: argo
      methods:
        - name: run
          revision: 0.1.0
    - interfaceGroupPath: cap.interface.templating.jinja2
      alias: jinja2
      methods:
        - name: template
          revision: 0.1.0

  action:
    runnerInterface: argo.run
    args:
      workflow:
        entrypoint: postgres-install
        templates:
          - name: postgres-install
            inputs:
              artifacts:
                - name: input-parameters # Entrypoint template gets the user parameters in 'input-parameters' artifacts.
                - name: kubeconfig
                  optional: true
            outputs:
              artifacts:
                - name: postgresql
                  from: "{{steps.resolve-psql-value.outputs.artifacts.ti-artifact}}"
            steps:
              - - name: create-helm-args
                  capact-action: jinja2.template
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{inputs.artifacts.input-parameters}}"
                      - name: template
                        raw:
                          data: |
                            generateName: true
                            chart:
                              name: "postgresql"
                              repo: "https://charts.bitnami.com/bitnami"
                              version: "10.2.6"
                            values:
                              volumePermissions:
                                enabled: true
                              global:
                                postgresql:
                                  postgresqlDatabase: <@ defaultDBName | default('postgres') @>
                                  postgresqlPassword: <@ superuser.password | default(random_word(length=16)) @>
                            output:
                              helmRelease:
                                useHelmReleaseStorage: true
                              additional:
                                useHelmTemplateStorage: true
                                goTemplate: |
                                  host: '{{ template "common.names.fullname" . }}.{{ .Release.Namespace }}'
                                  port: {{ template "postgresql.port" . }}
                                  defaultDBName: '{{ template "postgresql.database" . }}'
                                  superuser:
                                    # It cannot be changed
                                    username: 'postgres'
                                    password: '{{ template "postgresql.password" . }}'
                      - name: configuration
                        raw:
                          data: "unpackValue: true"

              - - name: helm-install
                  capact-action: helm.install
                  capact-outputTypeInstances:
                    - name: psql-helm-release
                      from: helm-release
                      # Affected by https://github.com/capactio/capact/issues/705
                      backend: helm-release-storage
                  arguments:
                    artifacts:
                      - name: input-parameters
                        from: "{{steps.create-helm-args.outputs.artifacts.render}}"
                      - name: runner-context
                        from: "{{workflow.outputs.artifacts.runner-context}}"
                      # TODO(hack): here we cannot pass optional TI, see: https://github.com/capactio/capact/issues/538
                      # it works only because we test in Helm runner in file exists under given artifact path
                      # and we don't create relations to this kubeconfig.
                      - name: kubeconfig
                        from: "{{inputs.artifacts.kubeconfig}}"
                        optional: true

              # allows reusing this workflow as a part of other umbrella workflows and read the artifact value
              - - name: resolve-psql-value
                  template: resolve-ti-art-value
                  capact-outputTypeInstances:
                    - name: postgresql
                      from: ti-artifact
                      backend: helm-template-storage
                  arguments:
                    artifacts:
                      - name: ti-artifact
                        from: "{{steps.helm-install.outputs.artifacts.additional}}"
                      - name: backend
                        from: "{{workflow.outputs.artifacts.helm-template-storage}}"

          - name: resolve-ti-art-value
            inputs:
              artifacts:
                - name: ti-artifact
                  path: /tmp/input-ti.yaml
                - name: backend
                  path: /tmp/storage-backend.yaml
            outputs:
              artifacts:
                - name: ti-artifact
                  path: /tmp/output.yaml
            container:
              image: ghcr.io/capactio/pr/ti-value-fetcher:PR-707
              env:
                - name: APP_LOGGER_DEV_MODE
                  value: "true"
                - name: APP_INPUT_TI_FILE_PATH
                  value: "{{inputs.artifacts.ti-artifact.path}}"
                - name: APP_INPUT_BACKEND_TI_FILE_PATH
                  value: "{{inputs.artifacts.backend.path}}"
                - name: APP_OUTPUT_FILE_PATH
                  value: "{{outputs.artifacts.ti-artifact.path}}"

